<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oauth.dao.DepartmentEntityMapper">
  <resultMap id="BaseResultMap" type="com.oauth.entity.DepartmentEntity">
    <id column="department_id" jdbcType="BIGINT" property="departmentId" />
    <result column="department_name" jdbcType="VARCHAR" property="departmentName" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    department_id, department_name, sort, created_time, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from department
    where department_id = #{departmentId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from department
    where department_id = #{departmentId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.oauth.entity.DepartmentEntity">
    insert into department (department_id, department_name, sort, 
      created_time, status)
    values (#{departmentId,jdbcType=BIGINT}, #{departmentName,jdbcType=VARCHAR}, #{sort,jdbcType=INTEGER}, #{createdTime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.oauth.entity.DepartmentEntity" useGeneratedKeys="true" keyProperty="departmentId">
    insert into department
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="departmentId != null">
        department_id,
      </if>
      <if test="departmentName != null and departmentName != ''">
        department_name,
      </if>
      <if test="sort != null and sort != -1">
        sort,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="status != null and status != 0">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="departmentId != null"> #{departmentId,jdbcType=BIGINT},
      </if>
      <if test="departmentName != null and departmentName != ''"> #{departmentName,jdbcType=VARCHAR},
      </if>
      <if test="sort != null and sort != -1"> #{sort,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null"> #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null and status != 0"> #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.oauth.entity.DepartmentEntity">
    update department
    <set>
      <if test="departmentName != null and departmentName != ''">
        department_name = #{departmentName,jdbcType=VARCHAR},
      </if>
      <if test="sort != null and sort != -1">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null and status != 0">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where department_id = #{departmentId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.oauth.entity.DepartmentEntity">
    update department
    set department_name = #{departmentName,jdbcType=VARCHAR},
      sort = #{sort,jdbcType=INTEGER},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER}
    where department_id = #{departmentId,jdbcType=BIGINT}
  </update>

  <resultMap id="DepartmentVo" extends="BaseResultMap" type="com.oauth.vo.DepartmentVo">
    <!--一对多，方式一-->
    <collection property="users" ofType="com.oauth.entity.UserInforEntity">
      <id column="user_id" jdbcType="BIGINT" property="userId" />
      <result column="username" jdbcType="VARCHAR" property="username" />
      <result column="password" jdbcType="VARCHAR" property="password" />
      <result column="status" jdbcType="INTEGER" property="status" />
      <result column="phone" jdbcType="VARCHAR" property="phone" />
      <result column="realname" jdbcType="VARCHAR" property="realname" />
      <result column="email" jdbcType="VARCHAR" property="email" />
    </collection>
    <collection property="parent" ofType="com.oauth.entity.DepartmentRelationshipEntity">
      <id column="department_relationship_id" jdbcType="BIGINT" property="departmentRelationshipId" />
      <result column="department_id" jdbcType="BIGINT" property="departmentId" />
      <result column="department_parent_id" jdbcType="BIGINT" property="departmentParentId" />
      <result column="department_path" jdbcType="VARCHAR" property="departmentPath" />
    </collection>
  </resultMap>

  <select id="selectDepartment" parameterType="java.util.HashMap" resultMap="DepartmentVo">
    select 
      distinct
      t1.department_id, t1.department_name, t1.sort, t1.created_time, t1.status,t4.*,t3.*
    from 
      department t1 
      left join department_leader t2 on t1.department_id = t2.department_id
      left join user_infor t4 on t4.user_id = t2.user_id
      left join department_relationship t3 on t3.department_id = t1.department_id
    where 1=1 
    <if test="param.departmentName != null and param.departmentName != ''">
        and t1.department_name = #{param.departmentName}
    </if>
    <if test="param.status != null">
        and t1.status = #{param.status}
    </if>
    <if test="departmentList != null and departmentList.size > 0">
      <foreach collection="departmentList" item="item" index="index" open="and t1.department_id in (" close=")" separator=",">
          #{item}
      </foreach>
    </if>
  </select>

  <select id="selectIdChildByName" resultMap="BaseResultMap">
    select 
      distinct
      t1.department_id
    from department t1
    left join department_relationship t3 on t3.department_id = t1.department_id
    where 1=1
    <if test="parentId != null and parentId != 0">
      and t3.department_parent_id = #{parentId}
    </if>
    <if test="parentId == 0">
      and t3.department_parent_id is null
    </if>
  </select>

  <select id="selectParentByName" resultMap="BaseResultMap">
    select 
      distinct
      t1.department_id, t1.department_name, t1.sort, t1.created_time, t1.status
    from department t1
    left join department_relationship t3 on t3.department_parent_id = t1.department_id
    where 1=1
    <if test="parentId != null and parentId != 0">
      and t3.department_parent_id = #{parentId}
    </if>
    <if test="parentId == 0">
      and t3.department_parent_id is null
    </if>
    <if test="parentDepartmentName != null and parentDepartmentName != ''">
      and department_name like concat('%',#{parentDepartmentName},'%')
    </if>
  </select>

  
  <select id="selectChild" parameterType="java.util.List" resultMap="DepartmentVo">
    select 
      distinct
      t1.department_id, t1.department_name, t1.sort, t1.created_time, t1.status,t4.*,t3.*
    from 
      department t1 
      left join department_leader t2 on t1.department_id = t2.department_id
      left join user_infor t4 on t4.user_id = t2.user_id
      left join department_relationship t3 on t3.department_id = t1.department_id
    where 1=1 
    <if test="departmentList != null and departmentList.size > 0">
      <foreach collection="departmentList" item="item" index="index" open="and t1.department_id in (" close=")" separator=",">
          #{item}
      </foreach>
    </if>
  </select>
</mapper>